// Cloud Storage File Transfer Service
// Generate Python gRPC stubs:
// python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. file_transfer.proto

syntax = "proto3";

package cloudstorage;

// File Transfer Service for Cloud Storage
service FileTransferService {
  // Upload a file to the cloud controller
  rpc UploadFile (stream FileUploadRequest) returns (FileUploadResponse);

  // Download a file from the cloud controller
  rpc DownloadFile (FileDownloadRequest) returns (stream FileDownloadResponse);

  // Request file replication across nodes
  rpc ReplicateFile (FileReplicationRequest) returns (FileReplicationResponse);

  // Get file transfer status
  rpc GetTransferStatus (TransferStatusRequest) returns (TransferStatusResponse);

  // Get node statistics
  rpc GetNodeStats (NodeStatsRequest) returns (NodeStatsResponse);

  // Get file location information
  rpc GetFileLocations (FileLocationRequest) returns (FileLocationResponse);

  // Register node with controller
  rpc RegisterNode (NodeRegistrationRequest) returns (NodeRegistrationResponse);

  // Send heartbeat to controller
  rpc SendHeartbeat (HeartbeatRequest) returns (HeartbeatResponse);
}

// File upload request with streaming chunks
message FileUploadRequest {
  oneof request {
    FileMetadata metadata = 1;
    FileChunk chunk = 2;
  }
}

// File metadata for upload
message FileMetadata {
  string file_name = 1;
  int64 file_size = 2;
  string file_id = 3;
  string source_node_id = 4;
  int32 replication_factor = 5;
}

// File chunk data
message FileChunk {
  string file_id = 1;
  int32 chunk_id = 2;
  bytes data = 3;
  string checksum = 4;
  int64 chunk_size = 5;
}

// File upload response
message FileUploadResponse {
  bool success = 1;
  string message = 2;
  string file_id = 3;
  repeated string replica_nodes = 4;
  TransferStatistics stats = 5;
}

// File download request
message FileDownloadRequest {
  string file_id = 1;
  string file_name = 2;
  string requesting_node_id = 3;
}

// File download response with streaming chunks
message FileDownloadResponse {
  oneof response {
    FileMetadata metadata = 1;
    FileChunk chunk = 2;
    TransferComplete complete = 3;
  }
}

// Transfer completion notification
message TransferComplete {
  bool success = 1;
  string message = 2;
  TransferStatistics stats = 3;
}

// File replication request
message FileReplicationRequest {
  string file_id = 1;
  int32 replication_factor = 2;
  repeated string preferred_nodes = 3;
}

// File replication response
message FileReplicationResponse {
  bool success = 1;
  string message = 2;
  repeated string replica_nodes = 3;
}

// Transfer status request
message TransferStatusRequest {
  string transfer_id = 1;
  string file_id = 2;
}

// Transfer status response
message TransferStatusResponse {
  string transfer_id = 1;
  string file_id = 2;
  TransferState state = 3;
  float progress_percentage = 4;
  TransferStatistics stats = 5;
  repeated ChunkStatus chunk_status = 6;
}

// Transfer state enumeration
enum TransferState {
  PENDING = 0;
  IN_PROGRESS = 1;
  COMPLETED = 2;
  FAILED = 3;
  CANCELLED = 4;
}

// Individual chunk status
message ChunkStatus {
  int32 chunk_id = 1;
  TransferState state = 2;
  int64 size = 3;
  float transfer_time = 4;
  string stored_node = 5;
}

// Comprehensive transfer statistics
message TransferStatistics {
  string file_name = 1;
  string transfer_id = 2;
  string source_node = 3;
  string destination_node = 4;
  int64 file_size = 5;
  float duration = 6;
  float transfer_rate = 7;
  float progress = 8;
  int32 chunks_completed = 9;
  int32 total_chunks = 10;

  // Segmentation details
  SegmentationInfo segmentation = 11;

  // Encapsulation properties
  EncapsulationInfo encapsulation = 12;

  // CPU and performance metrics
  PerformanceMetrics performance = 13;

  // Storage information
  StorageInfo storage = 14;
}

// Segmentation information
message SegmentationInfo {
  int32 total_chunks = 1;
  int64 chunk_size = 2;
  int64 last_chunk_size = 3;
  float segmentation_time = 4;
  float efficiency = 5;
}

// Encapsulation properties
message EncapsulationInfo {
  int64 header_overhead = 1;
  int64 payload_size = 2;
  bool compression_enabled = 3;
  bool encryption_enabled = 4;
  float protocol_efficiency = 5;
  int32 total_packets = 6;
}

// Performance metrics
message PerformanceMetrics {
  int32 cores_used = 1;
  int32 total_cores = 2;
  float cpu_utilization = 3;
  int32 thread_count = 4;
  int32 task_queue_size = 5;
  float scheduling_overhead = 6;
  float parallel_efficiency = 7;
}

// Storage information
message StorageInfo {
  int64 used_bytes = 1;
  int64 total_bytes = 2;
  int64 available_bytes = 3;
  float utilization_percentage = 4;
}

// Node statistics request
message NodeStatsRequest {
  string node_id = 1;
}

// Node statistics response
message NodeStatsResponse {
  string node_id = 1;
  StorageInfo storage = 2;
  int32 active_transfers = 3;
  int32 completed_transfers = 4;
  int64 total_data_transferred = 5;
  repeated string stored_files = 6;
  PerformanceMetrics performance = 7;
}

// File location request
message FileLocationRequest {
  string file_id = 1;
}

// File location response
message FileLocationResponse {
  string file_id = 1;
  bool found = 2;
  repeated string node_locations = 3;
  FileMetadata metadata = 4;
}

// Node registration request
message NodeRegistrationRequest {
  string node_id = 1;
  string host = 2;
  int32 port = 3;
  NodeCapacity capacity = 4;
}

// Node capacity information
message NodeCapacity {
  int32 cpu_cores = 1;
  int64 memory_bytes = 2;
  int64 storage_bytes = 3;
  int64 bandwidth_bps = 4;
}

// Node registration response
message NodeRegistrationResponse {
  bool success = 1;
  string message = 2;
  string assigned_node_id = 3;
}

// Heartbeat request
message HeartbeatRequest {
  string node_id = 1;
  NodeStatus status = 2;
}

// Node status information
message NodeStatus {
  StorageInfo storage = 1;
  PerformanceMetrics performance = 2;
  int32 active_transfers = 3;
  bool healthy = 4;
}

// Heartbeat response
message HeartbeatResponse {
  bool acknowledged = 1;
  string message = 2;
  repeated string pending_tasks = 3;
}