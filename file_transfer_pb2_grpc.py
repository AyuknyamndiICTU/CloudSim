# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import file_transfer_pb2 as file__transfer__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in file_transfer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FileTransferServiceStub(object):
    """File Transfer Service for Cloud Storage
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFile = channel.stream_unary(
                '/cloudstorage.FileTransferService/UploadFile',
                request_serializer=file__transfer__pb2.FileUploadRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.FileUploadResponse.FromString,
                _registered_method=True)
        self.DownloadFile = channel.unary_stream(
                '/cloudstorage.FileTransferService/DownloadFile',
                request_serializer=file__transfer__pb2.FileDownloadRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.FileDownloadResponse.FromString,
                _registered_method=True)
        self.ReplicateFile = channel.unary_unary(
                '/cloudstorage.FileTransferService/ReplicateFile',
                request_serializer=file__transfer__pb2.FileReplicationRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.FileReplicationResponse.FromString,
                _registered_method=True)
        self.GetTransferStatus = channel.unary_unary(
                '/cloudstorage.FileTransferService/GetTransferStatus',
                request_serializer=file__transfer__pb2.TransferStatusRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.TransferStatusResponse.FromString,
                _registered_method=True)
        self.GetNodeStats = channel.unary_unary(
                '/cloudstorage.FileTransferService/GetNodeStats',
                request_serializer=file__transfer__pb2.NodeStatsRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.NodeStatsResponse.FromString,
                _registered_method=True)
        self.GetFileLocations = channel.unary_unary(
                '/cloudstorage.FileTransferService/GetFileLocations',
                request_serializer=file__transfer__pb2.FileLocationRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.FileLocationResponse.FromString,
                _registered_method=True)
        self.RegisterNode = channel.unary_unary(
                '/cloudstorage.FileTransferService/RegisterNode',
                request_serializer=file__transfer__pb2.NodeRegistrationRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.NodeRegistrationResponse.FromString,
                _registered_method=True)
        self.SendHeartbeat = channel.unary_unary(
                '/cloudstorage.FileTransferService/SendHeartbeat',
                request_serializer=file__transfer__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.HeartbeatResponse.FromString,
                _registered_method=True)


class FileTransferServiceServicer(object):
    """File Transfer Service for Cloud Storage
    """

    def UploadFile(self, request_iterator, context):
        """Upload a file to the cloud controller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Download a file from the cloud controller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateFile(self, request, context):
        """Request file replication across nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransferStatus(self, request, context):
        """Get file transfer status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeStats(self, request, context):
        """Get node statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileLocations(self, request, context):
        """Get file location information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterNode(self, request, context):
        """Register node with controller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Send heartbeat to controller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=file__transfer__pb2.FileUploadRequest.FromString,
                    response_serializer=file__transfer__pb2.FileUploadResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=file__transfer__pb2.FileDownloadRequest.FromString,
                    response_serializer=file__transfer__pb2.FileDownloadResponse.SerializeToString,
            ),
            'ReplicateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateFile,
                    request_deserializer=file__transfer__pb2.FileReplicationRequest.FromString,
                    response_serializer=file__transfer__pb2.FileReplicationResponse.SerializeToString,
            ),
            'GetTransferStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransferStatus,
                    request_deserializer=file__transfer__pb2.TransferStatusRequest.FromString,
                    response_serializer=file__transfer__pb2.TransferStatusResponse.SerializeToString,
            ),
            'GetNodeStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeStats,
                    request_deserializer=file__transfer__pb2.NodeStatsRequest.FromString,
                    response_serializer=file__transfer__pb2.NodeStatsResponse.SerializeToString,
            ),
            'GetFileLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileLocations,
                    request_deserializer=file__transfer__pb2.FileLocationRequest.FromString,
                    response_serializer=file__transfer__pb2.FileLocationResponse.SerializeToString,
            ),
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=file__transfer__pb2.NodeRegistrationRequest.FromString,
                    response_serializer=file__transfer__pb2.NodeRegistrationResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=file__transfer__pb2.HeartbeatRequest.FromString,
                    response_serializer=file__transfer__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloudstorage.FileTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloudstorage.FileTransferService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileTransferService(object):
    """File Transfer Service for Cloud Storage
    """

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/cloudstorage.FileTransferService/UploadFile',
            file__transfer__pb2.FileUploadRequest.SerializeToString,
            file__transfer__pb2.FileUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloudstorage.FileTransferService/DownloadFile',
            file__transfer__pb2.FileDownloadRequest.SerializeToString,
            file__transfer__pb2.FileDownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloudstorage.FileTransferService/ReplicateFile',
            file__transfer__pb2.FileReplicationRequest.SerializeToString,
            file__transfer__pb2.FileReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransferStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloudstorage.FileTransferService/GetTransferStatus',
            file__transfer__pb2.TransferStatusRequest.SerializeToString,
            file__transfer__pb2.TransferStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNodeStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloudstorage.FileTransferService/GetNodeStats',
            file__transfer__pb2.NodeStatsRequest.SerializeToString,
            file__transfer__pb2.NodeStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloudstorage.FileTransferService/GetFileLocations',
            file__transfer__pb2.FileLocationRequest.SerializeToString,
            file__transfer__pb2.FileLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloudstorage.FileTransferService/RegisterNode',
            file__transfer__pb2.NodeRegistrationRequest.SerializeToString,
            file__transfer__pb2.NodeRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloudstorage.FileTransferService/SendHeartbeat',
            file__transfer__pb2.HeartbeatRequest.SerializeToString,
            file__transfer__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
